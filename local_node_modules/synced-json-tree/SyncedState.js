"use strict";

const assert = require(`assert`);
const eventually = require(`eventually`);
const freeze = require(`freeze`);
const JSONstringifyWithSortedKeys = require(`fast-json-stable-stringify`);
const LocalVersion = require(`./LocalVersion.js`);
const RedBlackTree = require(`bintrees`).RBTree;

module.exports = class {

    constructor (handleChange) {

        handleChange = handleChange === undefined? () => {} : handleChange;

        assert(typeof handleChange === `function`);

        this._broadcastChange = handleChange;

        this._localVersion = LocalVersion.oldest;

        this._localVersionChanges = new Map();

        this._localVersionTree = new RedBlackTree(LocalVersion.Comparison);

    }

    *LocalChanges () {

        yield* this.LocalChangesSince();

    }

    *LocalChangesSince (localVersion) {

        if (localVersion === undefined) {

            localVersion = LocalVersion.oldest;

        } else {

            LocalVersion.validate(localVersion);

        }

        const iterator = this._localVersionTree.upperBound(localVersion);

        while (iterator.data() !== null) {

            const localVersion = iterator.data();

            const change = this._localVersionChanges.get(localVersion);

            freeze(localVersion);

            freeze(change);

            yield {localVersion, change};

            iterator.next();

        }

    }

    async receive (change) {

        change = await eventually(() => this._Copy(change));

        await eventually(() => this._normalize(change));

        await eventually(() => this._receive(change));

    }

    write (change) {

        change = this._Copy(change);

        this._normalize(change);

        this._newify(change);

        this._writeAndBroadcast(change);

    }

    _Copy (change) {

        return JSON.parse(JSONstringifyWithSortedKeys(change));

    }

    _newify (change) {

    }

    _normalize (change) {

    }

    _receive (change) {

        this._writeAndBroadcast(change);

    }

    _write (newChange) {

        this._localVersion = LocalVersion.Newer(this._localVersion);

        this._localVersionChanges.set(this._localVersion, newChange);

        this._localVersionTree.insert(this._localVersion);

    }

    _writeAndBroadcast (newChange) {

        this._write(newChange);

        this._broadcastChange(newChange);

    }

    };