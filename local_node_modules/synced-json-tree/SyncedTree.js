"use strict";

const assert = require(`assert`);
const eventually = require(`eventually`);
const SyncedState = require(`./SyncedState.js`);
const Tree = require(`./Tree.js`);
const Version = require(`./Version.js`);

module.exports = class extends SyncedState {

    constructor () {

        super();

        this._tree = new Tree();

    }

    _newify (change) {

        assert(change.versions === undefined);

        const versions = this._tree.Versions(change.path);

        const targetVersion = versions[versions.length-1];

        versions[versions.length-1] = Version.Newer(targetVersion);

        change.versions = versions;

    }

    _normalize (change) {

        const {path, versions} = change;

        assert(Array.isArray(path));

        if (versions !== undefined) {
            
            assert(Array.isArray(versions));

            assert(versions.length === 1 + path.length);

            versions.forEach(Version.validate);

        }

    }

    _receive (change) {

        const {versions, path} = change;

        assert(versions !== undefined);

        let i = 0;

        for (const tree of this._tree.iterativelyBuild(path)) {

            const versionComparison = 
                Version.Comparison(versions[i], tree.version);

            if (versionComparison !== 0) {

                if (versionComparison > 0) {

                    if (i === versions.length-1) {

                        this._write(change);

                    }
                    else {

                        tree.pendingChanges.push(change);

                    }

                }

                break;

            }

            i++;

        }

    }

    _write (newChange) {

        super._write(newChange);

        const {path, versions} = newChange;

        const tree = this._tree.build(path);

        for (const {localVersion} of tree.Traversal()) {

            this._localVersionChanges.delete(localVersion);
            this._localVersionTree.remove(localVersion);

        }

        tree.childTrees = new Map();

        tree.localVersion = this._localVersion;

        for (const change of tree.pendingChanges) {

            eventually(() => this._receive(change));

        }

        tree.pendingChanges = [];

        tree.version = versions[versions.length-1];

    }

    };