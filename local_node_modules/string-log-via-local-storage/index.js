"use strict";

const assert = require(`assert`);
const EmptyStringLog = require(`./EmptyStringLog.js`);
const PrefixRegExp = require(`prefix-regexp`);

const firstNumber = 0;

module.exports = class extends EmptyStringLog {

    static IsSupported () {

        try {

            assert(typeof localStorage.length === `number`);
            assert(typeof localStorage.key === `function`);
            assert(typeof localStorage.getItem === `function`);
            assert(typeof localStorage.removeItem === `function`);
            assert(typeof localStorage.setItem === `function`);

            return true;

        } catch (error) {

            return false;

        }

    }

    constructor ({path}) {

        super({path});
        
        this._prefix = (path[path.length-1] === `/`)? path : path+`/`;

        const sortedKeysAndNumbers = this._SortedKeysAndNumbers();

        this._nextNumber = (
            sortedKeysAndNumbers.length === 0? 
            firstNumber : sortedKeysAndNumbers[sortedKeysAndNumbers.length-1][1]
            );

    }

    _SortedKeysAndNumbers () {

        if (this._sortedKeysAndNumbers === undefined) {

            const keysAndNumbers = [];

            const logRegExp = PrefixRegExp(this._prefix);

            for (let i=0; i<localStorage.length; i++) {

                const key = localStorage.key(i);

                if (logRegExp.test(key)) {

                    const number = Number(
                        key.substring(this._prefix.length, key.length)
                        );

                    assert(isFinite(number));

                    keysAndNumbers.push([key, number]);

                }

            }

            keysAndNumbers.sort((a, b) => a[1] - b[1]);

            this._sortedKeysAndNumbers = keysAndNumbers;

        }

        return this._sortedKeysAndNumbers;

    }

    Strings () {

        return (
            this._SortedKeysAndNumbers().map(([key]) => localStorage.get(key))
            );

    }

    clear () {

        for (const [key] of this._SortedKeysAndNumbers()) {

            localStorage.removeItem(key);

        }

        this._sortedKeysAndNumbers = [];

    }

    addToWriteQueue (string) {

        super.addToWriteQueue(string);

        localStorage.setItem(this._prefix + String(this._nextNumber++), string);

        this._sortedKeysAndNumbers = undefined;

    }

    };