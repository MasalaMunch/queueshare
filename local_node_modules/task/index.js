"use strict";

const add = require(`add`);
const assert = require(`assert`);
const doNothing = require(`do-nothing`);
const ShallowCopy = require(`shallow-copy`);
const State = require(`state`);

const Task = class extends State {

    constructor (props) {

        props = ShallowCopy(props);

        add(props, {

            inputs: props.prereqs,

            hasStarted: false,

            isDone: false,

            threwAnError: false,

            output: undefined,

            error: undefined,

            });

        super(props);

        this.prereqs = this.inputs;

        for (const task of this.prereqs) {

            assert(task instanceof Task);

        }

        if (this.f === undefined) {

            this.f = doNothing;

        }
        else {

            assert(typeof this.f === `function`);

        }

    }

    do () {

        this._start();

        try {

            this.output = this.f();

            this.isDone = true;

        } catch (error) {

            this.error = error;

            this.threwAnError = true;

        }

        this.broadcastChange();

    }

    update () {

        if (this.hasStarted) {

            return;

        }

        for (const task of this.prereqs) {

            if (!task.isDone) {

                return;

            }

        }

        this.do();

    }

    _start () {

        assert(!this.hasStarted);

        this.hasStarted = true;

        this.broadcastChange();

    }

    };

module.exports = Task;