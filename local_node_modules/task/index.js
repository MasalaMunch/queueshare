"use strict";

const assert = require(`assert`);
const extend = require(`extend`);
const State = require(`state`);

const update = function () {

    for (const task of this.prereqs) {

        if (!task.isDone) {

            return;

        }

    }

    this.start();

};

const start = async function () {

    this.hasStarted = true;

    this.broadcastChange();

    try {

        this.output = await this.do();

        this.isDone = true;

    } catch (error) {

        this.error = error;

        this.threwAnError = true;

    }

    this.broadcastChange();

};

const Task = class extends State {

    constructor (props) {

        props = Object.assign({}, props);

        props.prereqs = new Set(props.prereqs);

        for (const task of props.prereqs) {

            assert(task instanceof Task);

        }

        props.do = props.do === undefined? () => {} : props.do;

        assert(typeof props.do === `function`);

        extend(props, {
            inputs: props.prereqs, 
            update, 
            start, 
            hasStarted: false,
            isDone: false,
            threwAnError: false,
            output: undefined,
            error: undefined,
            });

        super(props);

    }

    };

module.exports = Task;