"use strict";

const assert = require(`assert`);
const extend = require(`extend`);
const State = require(`state`);

const staticProps = {

    update: function () {

        for (const task of this.prereqs) {

            if (!task.isDone) {

                return;

            }

        }

        this.do();

    },

    do: async function () {

        this.hasStarted = true;

        this.broadcastChange();

        try {

            this.output = await this.func();

            this.isDone = true;

        } catch (error) {

            this.error = error;

            this.threwAnError = true;

        }

        this.broadcastChange();

    },

    hasStarted: false,

    output: undefined,

    isDone: false,

    error: undefined,

    threwAnError: false,

    };

const Task = class extends State {

    constructor (props) {

        props = Object.assign({}, props);

        props.prereqs = new Set(props.prereqs);

        for (const task of props.prereqs) {

            assert(task instanceof Task);

        }

        props.func = props.func === undefined? () => {} : props.func;

        assert(typeof props.func === `function`);

        extend(props, staticProps, {inputs: props.prereqs});

        super(props);

    }

    };

module.exports = Task;